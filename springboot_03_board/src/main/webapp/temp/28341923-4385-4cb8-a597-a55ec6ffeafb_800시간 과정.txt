800 시간

1. 웹구축

프론트엔드
html / css / bootstrap (html, css 라이브러리) / Javascript / jquery (자바 라이브러리) / ajax / react  
 
백엔드
java / servlet / jsp / spring legency / spring boot  (최신) 

데이터베이스 (DB)
oracle / mybatis 

2. 빅데이터(Ai), 머신러닝

python

-웹구축

-데이터분석

머신러닝

====================

[Git, Github]

1. Git의 역할 : 버전관리, 협업
2. Git 설치, Github 회원가입

====================

[리눅스 명령어]

$ls => list 목록출력(디렉토리폴더 하위에있는 폴더들 출력)
$cd (change directory) => 작업디렉토리 위치 변경 (폴더변경) (cd .. = 마스터,메인폴더 빠져나오기)
$pwd (print working directory) => 현재 git작업위치를 표시
~ : home , / : 최상위 위치 , - : 옵션추가
-m (메세지,타이틀제목)
* $git commit b.txt -m '20220906 | Add b.txt' 
= b txt파일의 타이틀 제목은 20220906 | Add b.txt

$mkdir (make directory) => 디렉토리 생성
$touch => 파일 생성
$vi "파일명"=> 해당파일 편집, i => 편집,입력모드  esc => 일반모드변경 shitf + ; => 빠져나오기 명령어 입력(wq : write quite)
$cat 파일명 => 해당 파일내용 확인
$rm => 파일 삭제
$rm -r => 디렉토리안에 파일이 존재할때 삭제 ( -rf = 경고창을 안띄우고 바로삭제)
$rmdir => 디렉토리안에 아무런 파일이 없을떄 (빈 디렉토리일때 삭제)
$exit => 종료

ctrl + c => 현재 작성중인 단락 빠져나오기

untracked => 아무작업도 안해놓은 상태
$git add 파일명 =해당 파일을stage(=index)에 추가
$git commit 파일명 = 해당 파일을Local Repository에 추가
$git push origin master = Local Repository에 있는 파일들을 origin주소 (github)에 추가
$git add "b.txt c.txt d.txt" => b,c,d txt파일 추가\
$git status  => stage (=index)에 저장된 파일 확인
$git log
$git clone [github 주소] => github에 있는 파일을 새로 가져올때 사용
$git remote add origin [github 주소] = > 새로운 오리진파일 등록

$git add "." =>woriking directory에 있는 모든 파일 추가 (b,c,d 있다면 b,c,d 파일 추가)
$git pull origin master => github에서 수정한 코드를 vs git bash로 가져와 수정할때 필요한 명령어
(github에서 수정후 $git pull을 하지않고 vs git bash에서 수정시 충돌, github에서 수정했다면 git bash에서 반드시 git full후 git add부터 할것 스크립트도 저장)
                               add                                   commit
woriking directory ------------------> stage (=index) ------------------->Local Repository
($vi 파일명 =파일생성)                    ($git add a.txt)                         ($git commit a.txt -m 'Add a.txt')

--------------->github----------------------------------------->Local Repository
             ($git push origin master)                 ($git clone) -branch가 master에서 main으로 바뀜 (?) //


 * Local Repository에서 만든 파일은 master, github에서 clone으로 복사해온 파일은 main으로 취급 (?) //

새로운 repository작성시
$git init > $git add . (vs code에서 작성한 파일) > git commit -m '~~' > $git remote add origin [github주소] > git push origin master
         
$git add / $git commit / $git push / $git pull

=============2일차===================================


 * Repository 작성시 .gitignore / README.md 필수작성

.gitignore - github에 전송할때 제외시킬 파일을 작성하는곳

 - * : 해당 확장자 파일 전부 제외, 해당 제목 파일들 전부 제외

 ex) *.jpg : jpg파일들 전부 제외
       
      b.* : b파일들 전부 제외

   / : 해당 파일 전부 제외

  ex) sample/ : sample파일 전부제외

README.md - github에 전송할 파일설명

* gitignore.io > gitignore 명령어 사이트

$git restore --staged [파일명] => add해서 stage로 간 파일 빼기 (untracked 하기)

$git commit --amend => repository 편집창 열기 (stage에 있는 텍스트 repository에 추가하기)

협업시

메인 repository 만드신분 신청 메일로 받기

기존 작성하던 파일이 있다면 $cd .. 브랜치파일 빠져나오기

$get clone으로 주소 복사

vs code에 복사한 폴더, 파일추가

$get pull origin master 브랜치파일 가져오기

스크립트 작성 후 저장

$git add . > git commit -m '내용작성' > git push origins master

협업시 메인 repository작성자라면

vs code에서 새로운 파일 만들기

README.md 파일 만들어주기

vs code 스크립트 작성후 저장

$git init로 저장소 만들기

github settings > collaborators에서 팀원초대


DILLINGER (md 마크다운 편집기)명령어

``` = 단락생성

링크
![링크설명](url주소)

1,2 (넘버링) : 순서가 있는 목록

- : 순서가 없는 목록

| : 표 생성

:---: = 가운데 정렬
 ---: = 오른쪽 정렬

협업시 충돌

vs code 스크립트 작성 , 저장 - git commit - git push origin master - 메인 repository충돌 - git pull - 충돌된 스크립트중 선택후 저장 -

git commit - git push 

================================================

새로운 branch 만들기

$git branch (현재 사용중인 branch 표시)

* : 현재 사용중인 branch

$git branch [이름] : 새로운 branch 생성

$git switch [이름] : 해당 [이름] 으로 branch 변경

$git branch -d [이름] : 해당 [이름] branch 삭제 (기존 master branch로 이동 후 삭제해야함)
 
 - 바꾼 bracnh로 수정한 내용이 있다면 $git pull로 github의 데이터랑 맞춘 후 삭제가능

협업

$git branch [이름] 자기 branch 만들기 - 스크립트, 파일 수정 후 저장 - git add . - git commit - git push origin [새로만든 branch]

- github에서 수정된 파일 확인 - github pull request - New pull request - merge - commit - 다른사람 파일 추가

다른내용의 파일추가는 빨간 영역내의 기호, 특수문자 삭제후 mark - merge - commit

새로운 branch 파일 추가했으면 branch 삭제

삭제 과정

github - view all bracn 에서 자기 branch 삭제 - vs code에서 $git branch master master branch로 이동

 - $git branc -d [자기 branch이름]

====================

인코딩 (디코딩)
문자코드 : 문자와 숫자를 1:1매핑시켜놓은 값이다. 
             컴퓨터가 사용하는 0과 1로 변환할때 사용되는 기준 (문자마다 코드가 입력되어있음)

진법(진수) : 10(사람이 쓰는경우), 2(기계), 8, 16

기계 : 0과 1만 사용

'a' : 97

'A' : 65              - 문자코드

'0' : 48

숫자 : 5 (2진수로 표현시) : 101
문자 : 'A'

65(A)를 2진법으로 나누고 byte로 표시

                                                                     code paging : 각 나라별로 제공 (대한민국 : cp949)
문자코드 : ASCII코드 (7비트), 확장 ASCII코드 (8비트) = ANSI코드 - 추가된 1비트는 각 나라를 구분해주는 비트로 쓰임

             유니코드, EUC-KR코드

인코딩 : ASCII인코딩, 유니코드(UTF-8, UTF-16, UTF-32) - 자바를 슬때 사용하는 코드 (UTF-8을 쓴다) 

Database = Oracle

Back-end = Java, Servlet, Jsp, Spring, Spring Boot

Fornt-end = HTML, CSS, Bootstrap, JavaScript, DOM, jQuery, React 
                w3schools.com                                
                bootstrap.com
                jQuery.com
	   Reactjs.org

vs code front-end 설치목록

auto rename tag

prettier - code format

html to css

html css support

indent - rainbow (들여쓰기 색깔표시)

live server

HTML 파일은 폴더에 git 생성해서 관리
====================

bit - 0과 1을 표현

byte - bit 8개를 묶어놓은 하나의 묶음

2진법 : 0과 1

8진법 : 0~7

10진법 : 0~9

16진법 : 0~9, A(10) B(11) C(12) D(13) E(14) F(15)
                      - (숫자와 문자를 매핑)-문자코드 (10을 넘어가면 숫자가 두자리가 되어 문자로표현)

28AD =

16진법을 10진법으로 바꿔보기


====================

css 스타일 우선순위

inline 요소 - internal style (내부요소) - external style (외부요소)


====================
TIOBE Index - 언어순위 웹사이트

w3teches - 백엔드 언어

구글트렌드 - 검색어 비교

github servey 2021

<i class="fa-brands fa-apple"></i>
